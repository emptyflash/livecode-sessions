uniform u_resolution : Vec2
uniform u_audio : Vec4
uniform u_audio_time : Float
uniform u_audio_time_real : Float
uniform u_time : Float
uniform u_tex0 : Sampler2D

invert : Vec4 -> Float -> Vec4
invert c0 amount = let
    rgb1 = (cast3 1.0 - c0.rgb) * cast3 amount
    rgb2 = c0.rgb * cast3 (1.0 - amount)
    rgb3 = rgb1 + rgb2
    in vec4 rgb3.r rgb3.g rgb3.b c0.a

song1 coords = let 
    st = coords / u_resolution
    c0 = simplex_noise st (u_audio_time / 10.0) 1.0 1.0
    st2 = modulate st c0 0.3
    c1 = simplex_noise st (u_audio_time / 10.0) 2.0 1.0
    st3 = modulate st2 c1 0.3
    c2 = osc st3 (u_time / 10000.0) 10.0 1.0 136.0
    c3 = vec4 c2.r 0.0 c2.b c2.a
    c4 = src st2 u_tex0
    c5 = mix c3 (diff c4 c3) (u_audio.z / 100.0)
    in c5


select : Vec4 -> Float -> Float
select v t = let
    m = mod t 4.0
    r = if m < 1.0 then v.x else if m < 2.0 then v.y else if m < 3.0 then v.z else v.w
    in r

song2 coords = let
    st = kaleid (coords / u_resolution) (select (vec4 10.0 5.0 4.0 8.0) (u_audio_time / 10.0))
    c0 = simplex_noise st (u_audio_time / 50.0) (u_audio.y / 50.0) 1.0
    st2 = modulate st c0 1.0 # TODO maybe use u_audio here
    c1 = fbm st (u_audio_time / 50.0) (3.0 + 2.0 * sin (u_audio_time / 50.0)) 1.0
    st3 = modulate st2 c1 1.3
    c2 = osc st3 (u_time / 10.0) 10.0 1.0 136.0
    c3 = vec4 c2.r 0.12 c2.b c2.a
    in c3

song3 : Vec2 -> Vec4
song3 coords = let
    st = coords / u_resolution
    c0 = dw st (u_audio_time / 100.0) 1.0 1.0
    st2 = modulate st c0 (u_audio.z / 100.0)
    c1 = osc st2 u_time 3.0 0.1 136.0
    c2 = src st u_tex0
    st3 = modulate st c2 0.01
    st4 = if u_audio_time_real > 484.0 then scale_coords st3 1.0 (u_audio.z / 200.0) 1.0 else st3
    c3 = src st4 u_tex0
    c4 = blend c3 c1 (clamp 1.0 0.1 (1.0 - (u_audio_time_real - 362.0) / (365.0 - 362.0)))
    in c4

song4 coords = let
    st = coords / u_resolution
    st1 = kaleid st (select (vec4 10.0 5.0 4.0 8.0) (u_audio_time / 20.0))
    c0 = dw st1 (u_audio_time / 100.0) (u_audio.x / 200.0) 0.5
    st2 = modulate st1 c0 (u_audio.x / 200.0)
    c1 = osc st2 (u_audio_time / 10.0) 3.0 1.0 135.0
    in c1

    

main coords = let
    c0 = if u_audio_time_real < 99.0 then song1 coords else if u_audio_time_real < 306.0 then song2 coords else if u_audio_time_real < 618.0  then song3 coords else song4 coords
    in c0
